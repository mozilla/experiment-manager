schema {
  query: Query
  mutation: Mutation
}

type CreateExperiment {
  nimbusExperiment: NimbusExperimentType
  message: ObjectField
}

scalar DateTime

input DocumentationLinkType {
  title: NimbusExperimentDocumentationLink!
  link: String!
}

input ExperimentInput {
  id: Int
  status: NimbusExperimentStatus
  publishStatus: NimbusExperimentPublishStatus
  name: String
  hypothesis: String
  application: NimbusExperimentApplication
  publicDescription: String
  riskMitigationLink: String
  featureConfigId: Int
  documentationLinks: [DocumentationLinkType]
  referenceBranch: ReferenceBranchType
  treatmentBranches: [TreatmentBranchType]
  primaryOutcomes: [String]
  secondaryOutcomes: [String]
  channel: NimbusExperimentChannel
  firefoxMinVersion: NimbusExperimentFirefoxMinVersion
  populationPercent: String
  proposedDuration: Int
  proposedEnrollment: String
  targetingConfigSlug: NimbusExperimentTargetingConfigSlug
  totalEnrolledClients: Int
  isEndRequested: Boolean
  changelogMessage: String
}

scalar JSONString

type Mutation {
  createExperiment(input: ExperimentInput!): CreateExperiment
  updateExperiment(input: ExperimentInput!): UpdateExperiment
}

type NimbusBranchType {
  name: String!
  slug: String!
  description: String!
  ratio: Int!
  featureEnabled: Boolean!
  featureValue: String
}

type NimbusBucketRangeType {
  isolationGroup: NimbusIsolationGroupType!
  start: Int!
  count: Int!
}

enum NimbusChangeLogNewPublishStatus {
  IDLE
  REVIEW
  APPROVED
  WAITING
}

enum NimbusChangeLogNewStatus {
  DRAFT
  PREVIEW
  LIVE
  COMPLETE
}

enum NimbusChangeLogOldPublishStatus {
  IDLE
  REVIEW
  APPROVED
  WAITING
}

enum NimbusChangeLogOldStatus {
  DRAFT
  PREVIEW
  LIVE
  COMPLETE
}

type NimbusChangeLogType {
  experiment: NimbusExperimentType!
  changedOn: DateTime!
  changedBy: NimbusUser!
  oldStatus: NimbusChangeLogOldStatus
  oldPublishStatus: NimbusChangeLogOldPublishStatus
  newStatus: NimbusChangeLogNewStatus!
  newPublishStatus: NimbusChangeLogNewPublishStatus!
  message: String
  experimentData: JSONString
}

type NimbusConfigurationType {
  application: [NimbusLabelValueType]
  channel: [NimbusLabelValueType]
  featureConfig: [NimbusFeatureConfigType]
  firefoxMinVersion: [NimbusLabelValueType]
  outcomes: [NimbusOutcomeType]
  targetingConfigSlug: [NimbusLabelValueType]
  hypothesisDefault: String
  maxPrimaryOutcomes: Int
  documentationLink: [NimbusLabelValueType]
}

enum NimbusDocumentationLinkTitle {
  DS_JIRA
  DESIGN_DOC
  ENG_TICKET
}

type NimbusDocumentationLinkType {
  title: NimbusDocumentationLinkTitle!
  link: String!
}

enum NimbusExperimentApplication {
  DESKTOP
  FENIX
  IOS
}

enum NimbusExperimentChannel {
  NO_CHANNEL
  UNBRANDED
  NIGHTLY
  BETA
  RELEASE
}

enum NimbusExperimentDocumentationLink {
  DS_JIRA
  DESIGN_DOC
  ENG_TICKET
}

enum NimbusExperimentFirefoxMinVersion {
  NO_VERSION
  FIREFOX_11
  FIREFOX_12
  FIREFOX_13
  FIREFOX_14
  FIREFOX_15
  FIREFOX_16
  FIREFOX_17
  FIREFOX_18
  FIREFOX_19
  FIREFOX_20
  FIREFOX_21
  FIREFOX_22
  FIREFOX_23
  FIREFOX_24
  FIREFOX_25
  FIREFOX_26
  FIREFOX_27
  FIREFOX_28
  FIREFOX_29
  FIREFOX_30
  FIREFOX_31
  FIREFOX_32
  FIREFOX_33
  FIREFOX_34
  FIREFOX_35
  FIREFOX_36
  FIREFOX_37
  FIREFOX_38
  FIREFOX_39
  FIREFOX_40
  FIREFOX_41
  FIREFOX_42
  FIREFOX_43
  FIREFOX_44
  FIREFOX_45
  FIREFOX_46
  FIREFOX_47
  FIREFOX_48
  FIREFOX_49
  FIREFOX_50
  FIREFOX_51
  FIREFOX_52
  FIREFOX_53
  FIREFOX_54
  FIREFOX_55
  FIREFOX_56
  FIREFOX_57
  FIREFOX_58
  FIREFOX_59
  FIREFOX_60
  FIREFOX_61
  FIREFOX_62
  FIREFOX_63
  FIREFOX_64
  FIREFOX_65
  FIREFOX_66
  FIREFOX_67
  FIREFOX_68
  FIREFOX_69
  FIREFOX_70
  FIREFOX_71
  FIREFOX_72
  FIREFOX_73
  FIREFOX_74
  FIREFOX_75
  FIREFOX_76
  FIREFOX_77
  FIREFOX_78
  FIREFOX_79
  FIREFOX_80
  FIREFOX_81
  FIREFOX_82
  FIREFOX_83
  FIREFOX_84
  FIREFOX_85
  FIREFOX_86
  FIREFOX_87
  FIREFOX_88
  FIREFOX_89
  FIREFOX_90
  FIREFOX_91
  FIREFOX_92
  FIREFOX_93
  FIREFOX_94
  FIREFOX_95
  FIREFOX_96
  FIREFOX_97
  FIREFOX_98
  FIREFOX_99
  FIREFOX_100
}

enum NimbusExperimentPublishStatus {
  IDLE
  REVIEW
  APPROVED
  WAITING
}

enum NimbusExperimentStatus {
  DRAFT
  PREVIEW
  LIVE
  COMPLETE
}

enum NimbusExperimentTargetingConfigSlug {
  NO_TARGETING
  ALL_ENGLISH
  US_ONLY
  TARGETING_FIRST_RUN
  TARGETING_FIRST_RUN_CHROME_ATTRIBUTION
  TARGETING_FIRST_RUN_WINDOWS_1903_NEWER
  TARGETING_HOMEPAGE_GOOGLE
}

type NimbusExperimentType {
  id: Int
  owner: NimbusUser!
  status: NimbusExperimentStatus
  publishStatus: NimbusExperimentPublishStatus
  name: String!
  slug: String!
  publicDescription: String!
  riskMitigationLink: String!
  isPaused: Boolean!
  isEndRequested: Boolean!
  proposedDuration: Int!
  proposedEnrollment: Int!
  populationPercent: String
  totalEnrolledClients: Int!
  firefoxMinVersion: NimbusExperimentFirefoxMinVersion
  application: NimbusExperimentApplication
  channel: NimbusExperimentChannel
  projects: [ProjectType!]!
  hypothesis: String!
  primaryOutcomes: [String]
  secondaryOutcomes: [String]
  featureConfig: NimbusFeatureConfigType
  targetingConfigSlug: NimbusExperimentTargetingConfigSlug
  referenceBranch: NimbusBranchType
  documentationLinks: [NimbusDocumentationLinkType!]
  bucketRange: NimbusBucketRangeType
  changes: [NimbusChangeLogType!]!
  treatmentBranches: [NimbusBranchType]
  jexlTargetingExpression: String
  readyForReview: NimbusReadyForReviewType
  monitoringDashboardUrl: String
  startDate: DateTime
  computedEndDate: DateTime
  isEnrollmentPaused: Boolean
  enrollmentEndDate: DateTime
  canReview: Boolean
  reviewRequest: NimbusChangeLogType
  rejection: NimbusChangeLogType
  timeout: NimbusChangeLogType
}

enum NimbusFeatureConfigApplication {
  FIREFOX_DESKTOP
  FENIX
  IOS
}

type NimbusFeatureConfigType {
  id: ID!
  name: String!
  slug: String!
  description: String
  application: NimbusFeatureConfigApplication
  ownerEmail: String
  schema: String
  nimbusexperimentSet: [NimbusExperimentType!]!
}

enum NimbusIsolationGroupApplication {
  FIREFOX_DESKTOP
  FENIX
  IOS
}

type NimbusIsolationGroupType {
  id: ID!
  application: NimbusIsolationGroupApplication!
  name: String!
  instance: Int!
  total: Int!
  bucketRanges: [NimbusBucketRangeType!]!
}

type NimbusLabelValueType {
  label: String
  value: String
}

type NimbusOutcomeType {
  friendlyName: String
  slug: String
  application: NimbusExperimentApplication
  description: String
}

type NimbusReadyForReviewType {
  message: ObjectField
  ready: Boolean
}

type NimbusUser {
  id: ID!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
}

scalar ObjectField

type ProjectType {
  id: ID!
  name: String!
  slug: String!
  nimbusexperimentSet: [NimbusExperimentType!]!
}

type Query {
  experiments: [NimbusExperimentType]
  experimentBySlug(slug: String!): NimbusExperimentType
  nimbusConfig: NimbusConfigurationType
}

input ReferenceBranchType {
  name: String!
  description: String!
  ratio: Int!
  featureEnabled: Boolean
  featureValue: String
}

input TreatmentBranchType {
  name: String!
  description: String!
  ratio: Int!
  featureEnabled: Boolean
  featureValue: String
}

type UpdateExperiment {
  nimbusExperiment: NimbusExperimentType
  message: ObjectField
}
