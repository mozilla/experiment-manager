schema {
  query: Query
  mutation: Mutation
}

type CreateExperiment {
  nimbusExperiment: NimbusExperimentType
  message: ObjectField
  status: Int
}

scalar DateTime

input DocumentationLinkType {
  title: NimbusExperimentDocumentationLink!
  link: String!
}

type EndExperiment {
  nimbusExperiment: NimbusExperimentType
  message: ObjectField
  status: Int
}

input ExperimentIdInput {
  id: Int
}

input ExperimentInput {
  id: Int
  status: NimbusExperimentStatus
  name: String
  hypothesis: String
  application: NimbusExperimentApplication
  publicDescription: String
  riskMitigationLink: String
  featureConfigId: Int
  documentationLinks: [DocumentationLinkType]
  referenceBranch: ReferenceBranchType
  treatmentBranches: [TreatmentBranchType]
  primaryProbeSetSlugs: [String]
  secondaryProbeSetSlugs: [String]
  channel: NimbusExperimentChannel
  firefoxMinVersion: NimbusExperimentFirefoxMinVersion
  populationPercent: String
  proposedDuration: Int
  proposedEnrollment: String
  targetingConfigSlug: NimbusExperimentTargetingConfigSlug
  totalEnrolledClients: Int
}

type Mutation {
  createExperiment(input: ExperimentInput!): CreateExperiment
  updateExperiment(input: ExperimentInput!): UpdateExperiment
  endExperiment(input: ExperimentIdInput!): EndExperiment
}

type NimbusBranchType {
  name: String!
  slug: String!
  description: String!
  ratio: Int!
  featureEnabled: Boolean!
  featureValue: String
}

type NimbusBucketRangeType {
  isolationGroup: NimbusIsolationGroupType!
  start: Int!
  count: Int!
}

type NimbusConfigurationType {
  application: [NimbusLabelValueType]
  channel: [NimbusLabelValueType]
  featureConfig: [NimbusFeatureConfigType]
  firefoxMinVersion: [NimbusLabelValueType]
  probeSets: [NimbusProbeSetType]
  targetingConfigSlug: [NimbusLabelValueType]
  hypothesisDefault: String
  maxPrimaryProbeSets: Int
  documentationLink: [NimbusLabelValueType]
}

enum NimbusDocumentationLinkTitle {
  DS_JIRA
  DESIGN_DOC
  ENG_TICKET
}

type NimbusDocumentationLinkType {
  title: NimbusDocumentationLinkTitle!
  link: String!
}

enum NimbusExperimentApplication {
  DESKTOP
  FENIX
}

enum NimbusExperimentChannel {
  NO_CHANNEL
  UNBRANDED
  NIGHTLY
  BETA
  RELEASE
}

enum NimbusExperimentDocumentationLink {
  DS_JIRA
  DESIGN_DOC
  ENG_TICKET
}

enum NimbusExperimentFirefoxMinVersion {
  NO_VERSION
  FIREFOX_80
  FIREFOX_81
  FIREFOX_82
  FIREFOX_83
  FIREFOX_84
  FIREFOX_85
  FIREFOX_86
  FIREFOX_87
  FIREFOX_88
  FIREFOX_89
  FIREFOX_90
  FIREFOX_91
  FIREFOX_92
  FIREFOX_93
  FIREFOX_94
  FIREFOX_95
  FIREFOX_96
  FIREFOX_97
  FIREFOX_98
  FIREFOX_99
  FIREFOX_100
}

type NimbusExperimentOwner {
  id: ID!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
}

enum NimbusExperimentStatus {
  DRAFT
  REVIEW
  ACCEPTED
  LIVE
  COMPLETE
}

enum NimbusExperimentTargetingConfigSlug {
  NO_TARGETING
  ALL_ENGLISH
  US_ONLY
  TARGETING_FIRST_RUN
  TARGETING_FIRST_RUN_CHROME_ATTRIBUTION
  TARGETING_HOMEPAGE_GOOGLE
}

type NimbusExperimentType {
  id: Int
  owner: NimbusExperimentOwner!
  status: NimbusExperimentStatus
  name: String!
  slug: String!
  publicDescription: String!
  riskMitigationLink: String!
  isPaused: Boolean!
  isEndRequested: Boolean!
  proposedDuration: Int!
  proposedEnrollment: Int!
  populationPercent: String
  totalEnrolledClients: Int!
  firefoxMinVersion: NimbusExperimentFirefoxMinVersion
  application: NimbusExperimentApplication
  channel: NimbusExperimentChannel
  projects: [ProjectType!]!
  hypothesis: String!
  featureConfig: NimbusFeatureConfigType
  targetingConfigSlug: NimbusExperimentTargetingConfigSlug
  referenceBranch: NimbusBranchType
  documentationLinks: [NimbusDocumentationLinkType!]
  bucketRange: NimbusBucketRangeType
  treatmentBranches: [NimbusBranchType]
  targetingConfigTargeting: String
  primaryProbeSets: [NimbusProbeSetType]
  secondaryProbeSets: [NimbusProbeSetType]
  readyForReview: NimbusReadyForReviewType
  monitoringDashboardUrl: String
  startDate: DateTime
  endDate: DateTime
}

enum NimbusFeatureConfigApplication {
  FIREFOX_DESKTOP
  FENIX
}

type NimbusFeatureConfigType {
  id: ID!
  name: String!
  slug: String!
  description: String
  application: NimbusFeatureConfigApplication
  ownerEmail: String
  schema: String
  nimbusexperimentSet: [NimbusExperimentType!]!
}

enum NimbusIsolationGroupApplication {
  FIREFOX_DESKTOP
  FENIX
}

type NimbusIsolationGroupType {
  id: ID!
  application: NimbusIsolationGroupApplication!
  name: String!
  instance: Int!
  total: Int!
  bucketRanges: [NimbusBucketRangeType!]!
}

type NimbusLabelValueType {
  label: String
  value: String
}

enum NimbusProbeKind {
  EVENT
  SCALAR
}

type NimbusProbeSetType {
  id: ID!
  name: String!
  slug: String!
  probes: [NimbusProbeType!]!
  nimbusexperimentSet: [NimbusExperimentType!]!
}

type NimbusProbeType {
  id: ID!
  kind: NimbusProbeKind!
  name: String!
  eventCategory: String!
  eventMethod: String
  eventObject: String
  eventValue: String
  nimbusprobesetSet: [NimbusProbeSetType!]!
}

type NimbusReadyForReviewType {
  message: ObjectField
  ready: Boolean
}

scalar ObjectField

type ProjectType {
  id: ID!
  name: String!
  slug: String!
  nimbusexperimentSet: [NimbusExperimentType!]!
}

type Query {
  experiments: [NimbusExperimentType]
  experimentBySlug(slug: String!): NimbusExperimentType
  nimbusConfig: NimbusConfigurationType
}

input ReferenceBranchType {
  name: String!
  description: String!
  ratio: Int!
  featureEnabled: Boolean
  featureValue: String
}

input TreatmentBranchType {
  name: String!
  description: String!
  ratio: Int!
  featureEnabled: Boolean
  featureValue: String
}

type UpdateExperiment {
  nimbusExperiment: NimbusExperimentType
  message: ObjectField
  status: Int
}
